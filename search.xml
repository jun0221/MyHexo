<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇文章</title>
    <url>/2021/07/16/hello-world/</url>
    <content><![CDATA[<h1 id="StringBuffer-StringBuilder"><a href="#StringBuffer-StringBuilder" class="headerlink" title="StringBuffer,StringBuilder"></a>StringBuffer,StringBuilder</h1><p>stringbuffer是线程安全的 （里边的方法都是synchronized修饰）</p>
<p>stringbuilder是线程不安全的</p>
<p>考虑线程安全就用buffer不考虑就用builder</p>
<h1 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a>==与equals</h1><p>==对比的是栈中的值，基本数据比较的变量值，引用类型比较的事内存中对象的地址</p>
<p>equals比较的是两个对象的内容是否相等</p>
<p>equals不能用于基本数据类型变量。 如果没有对equals方法进行重写，则比较的是引用类型所指向的对象的地址。</p>
<h1 id="重载与重写区别"><a href="#重载与重写区别" class="headerlink" title="重载与重写区别"></a>重载与重写区别</h1><p>重载：发生在 一个类中，方法名相同，参数类型不通。</p>
<p>重写@Override：发生在父子类中，参数名，参数列表必须相同 方法抛出异常的时候作用于要等于或者小于父类</p>
<p>访问修饰符要大于等于父类。</p>
<h1 id="List与Set"><a href="#List与Set" class="headerlink" title="List与Set"></a>List与Set</h1><p>List ：有序 可重复，允许多个null元素对象 可以使用迭代器去除所有元素，还可以使用get获取制定下标</p>
<p>Set： 无需，不可重复 最多只有一个null对象 只可以通过迭代器获得所有元素</p>
<h1 id="ArrayList与LinkList"><a href="#ArrayList与LinkList" class="headerlink" title="ArrayList与LinkList"></a>ArrayList与LinkList</h1><p>ArrayList基于动态数组（连续内存存储）适合下标访问，（每次新增或者删除，就会新建一个数组，扩容机制，将老数组值给新数组）所以不推荐。</p>
<p>LinkList基于链表，分散在内存中，适合插入以及删除  </p>
<h1 id="Hashmap与HashTable的区别"><a href="#Hashmap与HashTable的区别" class="headerlink" title="Hashmap与HashTable的区别"></a>Hashmap与HashTable的区别</h1><p>Hashmap方法没有synchronized修饰，线程非安全，HasHTable线程安全</p>
<p>Hashmap允许key合value未null HashTable不允许</p>
<p>Hashmap底层是数组加连表</p>
<p>在JDK8的时候 边表高度到8数组长度到64，连表转变为红黑树</p>
<p>一般如果new HashMap() 不传值，默认大小是16，负载因子是0.75， 如果自己传入初始大小k，初始化大小为 大于k的 2的整数次方， </p>
<p>例如如果传10，大小为16</p>
<h1 id="什么是spring"><a href="#什么是spring" class="headerlink" title="什么是spring"></a>什么是spring</h1><p>spring是一个容器框架用来装JAVABean的，一个轻量级控制反转ioc和面向切面aop的容器框架</p>
<h1 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h1><p>ioc是一种设计思想，依赖注入是实现ioc的一种方式</p>
<p>许多应用都是通过彼此间的相互合作来实现业务逻辑的，如类A要调用类B的方法，以前我们都是在类A中，通过自身new一个类B，然后在调用类B的方法，现在我们把new类B的事情交给spring来做，在我们调用的时候，容器会为我们实例化。</p>
<h1 id="Aop本质"><a href="#Aop本质" class="headerlink" title="Aop本质"></a>Aop本质</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">切面编程，就是在你项目原有的功能基础上，通过AOP去添加新的功能，这些功能是建立在原有</span><br><span class="line">功能的基础上的，而且原有的功能并不知道你已经添加了新的功能。比如说，你去ATM取钱，取钱是一个功能，取完钱后向你的手机发送一条取钱信息，这就是新加的功能。</span><br><span class="line">AOP就是在某一个类或方法执行前后打个标记，声明在执行到这里之前要先执行什么，执行完这里之后要接着执行什么。插入了新的执行方法。</span><br></pre></td></tr></table></figure>

<h1 id="什么是spring事务"><a href="#什么是spring事务" class="headerlink" title="什么是spring事务"></a>什么是spring事务</h1><p>我们在实际业务场景中，经常会遇到数据频繁修改读取的问题。在同一时刻，不同的业务逻辑对同一个表数据进行修改，</p>
<p>这种冲突很可能造成数据不可挽回的错乱，所以我们需要用事务来对数据进行管理。</p>
<p>事务必须服从ACID原则。ACID指的是原子性（atomicity）一致性（consistency）、隔离性（isolation）</p>
<p>和持久性（durability）。</p>
<p>要么都成功要么都失败</p>
<p>例子：比如你去ATM机取1000块钱，大体有两个步骤：首先输入密码金额，银行卡扣掉1000元钱；然后ATM出1000元钱。这两个步骤必须是要么都执行要么都不执行。如果银行卡扣除了1000块但是ATM出钱失败的话，你将会损失1000元；如果银行卡扣钱失败但是ATM却出了1000块，那么银行将损失1000元。所以，如果一个步骤成功另一个步骤失败对双方都不是好事，如果不管哪一个步骤失败了以后，整个取钱过程都能回滚，也就是完全取消所有操作的话，这对双方都是极好的。</p>
<h1 id="springboot-springMVC-spring区别"><a href="#springboot-springMVC-spring区别" class="headerlink" title="springboot springMVC spring区别"></a>springboot springMVC spring区别</h1><p>spring是一个ioc容器，用来管理bean，使用依赖注入实现控制反转，还提供了AOP机制</p>
<p>SpringMVC是Spring框架的一个模块,是基于mvc的web模块。</p>
<p>第一步：发起请求到前端控制器DispatcherServlet</p>
<p>第二步：前端控制器请求HandlerMapping查找 Handler</p>
<p>第三步：处理器映射HandlerMapping向前端控制器返回Handler</p>
<p>第四步：前端控制器调用处理器适配器去执行Handler</p>
<p>第五步：处理器适配器去执行Handler</p>
<p>第七步：处理器适配向前端控制器返回ModelAndView</p>
<p>第九步：视图解析器向前端控制器返回View</p>
<p>第十步：前端控制器进行视图渲染</p>
<p>spingboot是spring提供的一个快速开发工具包，让程序员更方便，快速的开发spring和springmvc的应用简化配置（约定大于配置），开箱即用</p>
<h1 id="spingboot自动配置原理"><a href="#spingboot自动配置原理" class="headerlink" title="spingboot自动配置原理"></a>spingboot自动配置原理</h1><p>首先在springboot启动类加上一个注解@SpringBootApplication</p>
<p>这个注解是一个混合注解其中用三个注解</p>
<p>@Configuration （表明交给spingioc容器进行管理） @ComponentScan（定义扫描包路径） </p>
<p>最核心的注解就是这个@EnableAutoConfiguration</p>
<p>自动装配通过selectimport把类通过反射放入ioc容积中全部变成Bean</p>
<h1 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h1><p>#{}是预编译处理，是一个占位符，${}是字符串替换，是拼接符，</p>
<p>使用#{}可以有效的防止SQL注入，提高系统安全性</p>
<h1 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h1><p>索引就是快速查找那些具体值得记录(字典就是索引机制，比如拼音，笔画)</p>
<p>唯一索引：在创建唯一索引时不能具有相同的索引值。</p>
<p>主键索引：在我们给一个字段设置主键的时候，它就会自动创建主键索引，用来确保每一个值都是唯一的。</p>
<p>聚集索引：我们在表中添加数据的顺序，与我们创建的索引键值相同，而且一个表中只能有一个聚集索引。</p>
<p>普通索引：它的结构主要以B+树和哈希索引为主，主要是对数据表中的数据进行精确查找。</p>
<p>全文索引：它的作用是搜索数据表中的字段是不是包含我们搜索的关键字，就像搜索引擎中的模糊查询。</p>
<p><em><strong>*创建索引的命令：*</strong></em> CREATE INDEX 索引名称 ON 表名称 (列名称)</p>
<p><em>*<em>*</em>*使用索引的优点就是：****</em>*</p>
<ol>
<li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li>
<li>提高数据的搜索速度，这也是创建索引的最主要的原因。</li>
</ol>
<p><em>*<em>*</em>*使用索引的缺点就是：****</em>*</p>
<ol>
<li>在我们建立数据库的时候，需要花费时间去建立和维护索引，而且随着数据量的增加，需要维护它的时间也会增加。</li>
<li>在创建索引的时候会占用存储空间。</li>
<li>在我们需要修改表中的数据时，还需要对索引进行维护，所以对数据库的维护带来了一定的麻烦。-</li>
</ol>
<h1 id="sql慢查询"><a href="#sql慢查询" class="headerlink" title="sql慢查询"></a>sql慢查询</h1><p>分析语句，是否查询到额外的数据，可能查到多余得的抛弃掉，看看是否命中索引，如果数据量是否太大，如果太大可以进行分表操作</p>
<h1 id="myisam与innoDB得区别"><a href="#myisam与innoDB得区别" class="headerlink" title="myisam与innoDB得区别"></a>myisam与innoDB得区别</h1><p><strong>InnoDB支持事务</strong>  MyISAM不支持</p>
<p>InnoDB支持外键，而MyISAM不支持</p>
<p>InnoDB是聚集索引** MyISAM是非聚集索引</p>
<p>Innodb不支持全文索引，而MyISAM支持全文索引</p>
<p><strong>InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁</strong></p>
<p><strong>如果表中绝大多数都只是读查询，可以考虑MyISAM，如果既有读也有写，请使用InnoDB。</strong></p>
<h1 id="springCloud"><a href="#springCloud" class="headerlink" title="springCloud"></a>springCloud</h1><p>基于http协议</p>
<p>restflAPI</p>
<ul>
<li><p>Spring Cloud Eureka：服务注册与发现</p>
</li>
<li><p>Spring Cloud Zuul：服务网关（改变路由请求入口）</p>
</li>
<li><p>Spring Cloud Ribbon：客户端负载均衡（轮询，随机）</p>
</li>
<li><p>Spring Cloud Feign：声明性的Web服务客户端（远程api调用）</p>
</li>
<li><p>Spring Cloud Hystrix：断路器（服务熔断，服务降级）</p>
</li>
<li><p>服务熔断：就是对应雪崩效应的一种微服务链路保护机制</p>
</li>
<li><p>比如一个服务挂掉了，快速返回错误的响应信息</p>
</li>
<li><p>加入@HystrixCommand=接口名字（5秒内20次调用失败就会启动熔断机制）</p>
</li>
<li><p>服务降级：从网络请求负载考虑，当服务器关闭后，准备一个fallbackfactory，返回一个缺省值</p>
</li>
<li><p>Spring Cloud Config：分布式统一配置管理</p>
</li>
</ul>
<h1 id="string常用方法"><a href="#string常用方法" class="headerlink" title="string常用方法"></a>string常用方法</h1><p><img src="https://img-blog.csdnimg.cn/20200518091146194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIzMjk1NQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失</p>
<h3 id="Redis的过期键的删除策略"><a href="#Redis的过期键的删除策略" class="headerlink" title="Redis的过期键的删除策略"></a>Redis的过期键的删除策略</h3><p>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。<br>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。<br>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</p>
<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h1><h3 id="1-redis-挂了，大部分数据失效。"><a href="#1-redis-挂了，大部分数据失效。" class="headerlink" title="1. redis-挂了，大部分数据失效。"></a>1. redis-挂了，大部分数据失效。</h3><p><strong>解决方案</strong></p>
<p>规避雪崩：</p>
<p>redis搭建集群，实现高可用<br>错开过期时间。<br>如果已经出现雪崩：服务的降级熔断。   </p>
<h1 id="缓存穿透（都没有数据）"><a href="#缓存穿透（都没有数据）" class="headerlink" title="缓存穿透（都没有数据）"></a><strong>缓存穿透</strong>（都没有数据）</h1><h3 id="是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。"><a href="#是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。" class="headerlink" title="是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。"></a>是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</h3><p>解决方案： </p>
<p> 缓存空数据。代码简单，效果不好。<br> 每次查询，不论查不查得到，都放进redis中作为空数据，下次再查询就返回数据。避免了查询数据库。<br> 但是，用户可以换着id来不停的查询，依然会跳过redis，命中数据库，并且redis中存在大量空数据。占用redis内存。</p>
<p>​    布隆过滤器。 代码复杂，效果好。 谷歌的，看作是一个arraylist,只有put，和判断的方法，只需要关心预计插入量和容错率<br>​     底层位数组，跟hash个数不用我们算。</p>
<h1 id="缓存击穿（缓存中没有）"><a href="#缓存击穿（缓存中没有）" class="headerlink" title="缓存击穿（缓存中没有）"></a><strong>缓存击穿</strong>（缓存中没有）</h1><h3 id="一般数据：数据库中有数据，缓存中没有-没人访问过"><a href="#一般数据：数据库中有数据，缓存中没有-没人访问过" class="headerlink" title="一般数据：数据库中有数据，缓存中没有(没人访问过)"></a>一般数据：数据库中有数据，缓存中没有(没人访问过)</h3><ol>
<li>设置热点数据永远不过期。(会浪费内存)</li>
<li>加锁，保证只有一个线程去查询后端服务器</li>
</ol>
<h1 id="Redis持久化AOF和RDB的区别"><a href="#Redis持久化AOF和RDB的区别" class="headerlink" title="Redis持久化AOF和RDB的区别"></a>Redis持久化AOF和RDB的区别</h1><p> 默认就是RDB</p>
<p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。</p>
<p>AOF持久化以日志的形式记录服务器所处理的每一个写   查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录</p>
<p>(将我们的所有命令都记录下来，恢复的时候全部执行一遍)</p>
<h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p>redis单条命令是具有原子性的，但事务不保证原子性</p>
<p>redis事务具有一次性，排他性，顺序性</p>
<h1 id="Redis乐观锁"><a href="#Redis乐观锁" class="headerlink" title="Redis乐观锁"></a>Redis乐观锁</h1><p>利用watch监听</p>
<p>更新数据的时候去判断一下，再确定是否有人修改过这个数据</p>
<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><h3 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1.主从复制"></a>1.主从复制</h3><h3 id="复制很多，被复制的叫主机，主机能写-，从机不能写，主机挂掉之后，需要自己选组谁当主机"><a href="#复制很多，被复制的叫主机，主机能写-，从机不能写，主机挂掉之后，需要自己选组谁当主机" class="headerlink" title="复制很多，被复制的叫主机，主机能写 ，从机不能写，主机挂掉之后，需要自己选组谁当主机"></a>复制很多，被复制的叫主机，主机能写 ，从机不能写，主机挂掉之后，需要自己选组谁当主机</h3><h3 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2.哨兵模式"></a>2.哨兵模式</h3><h3 id="当主机挂掉之后，自动选举一台从机变成主机，如果主机回来了，回来只能当做从机"><a href="#当主机挂掉之后，自动选举一台从机变成主机，如果主机回来了，回来只能当做从机" class="headerlink" title="当主机挂掉之后，自动选举一台从机变成主机，如果主机回来了，回来只能当做从机"></a>当主机挂掉之后，自动选举一台从机变成主机，如果主机回来了，回来只能当做从机</h3><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>工厂设计模式 : Spring使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。<br>代理设计模式 : Spring AOP 功能的实现。<br>单例设计模式 : Spring 中的 Bean 默认都是单例的。<br>模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。<br>包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。<br>观察者模式: Spring 事件驱动模型就是观察者模式很经典的一个应用。<br>适配器模式 :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配Controller。</p>
<h1 id="springboot-bean的生命周期："><a href="#springboot-bean的生命周期：" class="headerlink" title="springboot bean的生命周期："></a>springboot bean的生命周期：</h1><p>1.解析bean定义信息获取BeanDefinition<br>2.通过反射进行实例化得到一个对象<br>3、通过处理器将注解信息进行属性填充，将注解信息转换为bean对象<br>4、回调Aware方法<br>5.使用bean<br>6.销毁操作destory()    </p>
<h1 id="创建线程-的方法"><a href="#创建线程-的方法" class="headerlink" title="创建线程 的方法"></a>创建线程 的方法</h1><p>第一种方法： 继承Thread类，重写run()方法，run()方法代表线程要执行的任务。<br>第二种方法： 实现Runnable接口，重写run()方法，run()方法代表线程要执行的任务。<br>第三种方法： 实现callable接口，重写call()方法，call()作为线程的执行体，具有返回值，并且可以对异常进行声明和抛出<br>使用start()方法来启动线程</p>
<h1 id="四种线程池："><a href="#四种线程池：" class="headerlink" title="四种线程池："></a>四种线程池：</h1><p>newFixedThreadPool：该方法返回一个固定数量的线程池特点就是可以重用固定数量线程的线程池使用<br>newSingleThreadExecutor: 创建一个线程的线程池，特点是使用单个工作线程执行任务<br>newCachedThreadPool：不限制容量的线程池，特点是可以根据需要来创建新的线程执行任务，没有特定的corePool<br>newScheduledThreadPool: 创建一个可以指定线程的数量的线程池，特点一个定时功能的线程池。</p>
<p>线程池的介绍：在 Java 中，创建和销毁线程需要消耗很大的系统资源，线程池的核心逻辑是提前创建好若干个线程。如果有任务需要处理，则交给线程池中的线程来执行就行，任务处理完以后这个线程不会被销毁，而是等待后续分配任务。<br>    同时通过线程池来重复管理线程还可以避免创建线程所带来的性能开销</p>
<h1 id="dubbo和springCloud之间的区别"><a href="#dubbo和springCloud之间的区别" class="headerlink" title="dubbo和springCloud之间的区别"></a>dubbo和springCloud之间的区别</h1><p>Spring Cloud抛弃了Dubbo 的RPC通信，采用的是基于HTTP的REST方式</p>
<h2 id="Zookeeper保证CP，Eureka保证AP"><a href="#Zookeeper保证CP，Eureka保证AP" class="headerlink" title="Zookeeper保证CP，Eureka保证AP"></a>Zookeeper保证CP，Eureka保证AP</h2><p>当zookeeper中服务父节点挂掉了会自动选举leader，在选举时间服务是不可用的</p>
<p>eureka所有的节点都是平等的，只要有一台eureka存在就能保证服务可用性</p>
<p>因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。</p>
<h1 id="隔离级别："><a href="#隔离级别：" class="headerlink" title="隔离级别："></a><strong>隔离级别：</strong></h1><p><strong>READ UNCOMMITTED（未提交读）</strong></p>
<p>　　在READ UNCOMMITTED级别，事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读（Dirty Read）。这个级别会导致很多问题，从性能上来说，READ UNCOMMITTED不会比其他的级别好太多，但却缺乏其他级别的很多好处，除非真的有非常必要的理由，在实际应用中一般很少使用。</p>
<p><strong>READ COMMITTED（提交读）</strong></p>
<p>　　大多数数据库系统的默认隔离级别都是READ COMMTTED（但MySQL不是）。READ COMMITTED满足前面提到的隔离性的简单定义：一个事务开始时，只能”看见”已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候叫做不可重复读（nonrepeatble read），因为两次执行同样的查询，可能会得到不一样的结果</p>
<p><strong>REPEATABLE READ(可重复读)</strong></p>
<p>　　REPEATABLE READ解决了脏读的问题。该隔离级别保证了在同一个事务中多次读取同样记录结果是一致的。但是理论上，可重复读隔离级别还是无法解决另外一个幻读（Phantom Read）的问题。所谓幻读，指的是当某个事务在读取某个范围内的记录时，另一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行（Phantom Row）。InnoDB和XtraDB存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）解决了幻读的问题。</p>
<p><strong>SERIALIZABLE（可串行化）</strong></p>
<p>　　SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题。简单来说，SERIALIZABLE会在读取每一行数据都加锁，所以可能导致大量的超时和锁争用问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑采用该级别。</p>
<h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a><strong>饿汉式</strong></h1><p>饿汉式是典型的空间换时间，当类装载的时候就会创建类实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要判断了，节省了运行时间。</p>
<h1 id="线程安全的懒汉式"><a href="#线程安全的懒汉式" class="headerlink" title="线程安全的懒汉式"></a>线程安全的懒汉式</h1><p>双重检查加锁</p>
<h1 id="linux基本操作"><a href="#linux基本操作" class="headerlink" title="linux基本操作"></a>linux基本操作</h1><pre><code>ls :列出目录内容 -al 列出所有文件以及详细信息

    cd :切换目录

            cd ~ :用户当前目录

            cd  / :根目录

            cd  - :上一次访问的目录

            cd  .. :上一级目录

    pwd :显示当前工作目录

    mkdir :创建目录

    rmdir :删除空目录

2.文件管理

    cat ：显示文本文件内容

    cp :复制文件或目录  cp -r [源文件或目录] [目标文件或目录]

    mv:移动或重命名现有的文件或目录  mv [源文件或目录] [目标文件或目录]

    rm:删除文件或目录 rm -rf [文件或目录]

    find：查找文件或目录 find /root/ -name &#39;test&#39;

3.文档编辑

    vi 或vim命令

    1.输入 vi 文件名 进入一般模式

    2.按下i 从一般模式进入插入模式

    3.按下 esc 从插入模式退出到一般模式

    4.在一般模式下，输入:wq 退出编辑

4.grep命令

    grep -i control /root/install.log   #查看install.log文件中是否含有control字符的内容 -i 忽略大小写

5.ps 命令 提供对进程的一次性查看

    ps -ef | grep -i ping

6. kill命令  杀死进程

    kill -9 pid

7.ifconfig 显示网络设备

8.ping 测试与目标主机的联通性

9.备份压缩 tar

   压缩： tar -zcvf aaa.tar ./aaa/

   解压： tar -zxvf aaa.tar -C [目标位置]

10.文件权限 chmod命令

    chmod 777 xxx
11.查看日志 tail-n    
</code></pre>
<h1 id="group-by-和-order-by-一起使用问题"><a href="#group-by-和-order-by-一起使用问题" class="headerlink" title="group by 和 order by 一起使用问题"></a>group by 和 order by 一起使用问题</h1><p><strong>group by 和 order by 一起使用时，会先使用group by 分组，并取出分组后的第一条数据，所以后面的order by 排序时根据取出来的第一条数据来排序的，但是第一条数据不一定是分组里面的最大数据。</strong></p>
<p>group by 比order by先执行，order by不会对group by 内部进行排序，如果group by后只有一条记录，那么order by 将无效。 </p>
<h1 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a><strong>继承 Thread 类</strong></h1><p><strong>即多个线程分别完成自己的任务</strong></p>
<h1 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a><strong>实现 Runnable 接口</strong></h1><p><strong>即多个线程共同完成一个任务。</strong></p>
<h1 id="什么是序列化和反序列化"><a href="#什么是序列化和反序列化" class="headerlink" title="什么是序列化和反序列化"></a><strong>什么是序列化和反序列化</strong></h1><p> <strong>序列化</strong>是指将Java对象转换为字节序列的过程，而<strong>反序列化</strong>则是将字节序列转换为Java对象的过程。</p>
<h1 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h1><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
<h1 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h1><p>如果条件中有or，即使其中有条件带索引也不会使用</p>
<p>like查询是以%开头</p>
<p>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</p>
<h1 id="redis双删策略"><a href="#redis双删策略" class="headerlink" title="redis双删策略"></a>redis双删策略</h1><p><strong>如何实现延迟双删</strong><br>**<em>先进行缓存清除，再执行update，最后（*<em>延迟N秒*<em>）再执行缓存清除。</em></em></em></p>
]]></content>
  </entry>
</search>
